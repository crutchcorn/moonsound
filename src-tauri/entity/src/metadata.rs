use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::N(1))")]
pub enum ContentAdvisory {
    #[sea_orm(string_value = "N")]
    None,
    #[sea_orm(string_value = "E")]
    Explicit,
    #[sea_orm(string_value = "C")]
    Censored,
}

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "metadata")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub song_id: Option<i32>,
    pub accurate_rip_count: Option<String>,
    pub accurate_rip_count_all_offsets: Option<String>,
    pub accurate_rip_count_with_offset: Option<String>,
    pub accurate_rip_crc: Option<String>,
    pub accurate_rip_disc_id: Option<String>,
    pub accurate_rip_id: Option<String>,
    pub accurate_rip_offset: Option<String>,
    pub accurate_rip_result: Option<String>,
    pub accurate_rip_total: Option<String>,
    pub acoust_id_fingerprint: Option<String>,
    pub acoust_id_id: Option<String>,
    pub album: Option<String>,
    pub album_artist: Option<String>,
    pub arranger: Option<String>,
    pub artist: Option<String>,
    pub author: Option<String>,
    pub bpm: Option<u64>,
    pub cd_toc: Option<String>,
    pub comment: Option<String>,
    pub compilation_flag: Option<bool>,
    pub composer: Option<String>,
    pub conductor: Option<String>,
    pub content_advisory: Option<ContentAdvisory>,
    pub copyright: Option<String>,
    pub cue_tools_db_disc_confidence: Option<String>,
    pub cue_tools_db_track_confidence: Option<String>,
    pub date: Option<String>,
    pub description: Option<String>,
    pub disc_number: Option<u64>,
    pub disc_subtitle: Option<String>,
    pub disc_total: Option<u64>,
    pub encoded_by: Option<String>,
    pub encoder: Option<String>,
    pub encoder_settings: Option<String>,
    pub encoding_date: Option<String>,
    pub engineer: Option<String>,
    pub ensemble: Option<String>,
    pub genre: Option<String>,
    pub grouping: Option<String>,
    pub ident_asin: Option<String>,
    pub ident_barcode: Option<String>,
    pub ident_catalog_number: Option<String>,
    pub ident_ean_upn: Option<String>,
    pub ident_isbn: Option<String>,
    pub ident_isrc: Option<String>,
    pub ident_pn: Option<String>,
    pub ident_podcast: Option<String>,
    pub ident_upc: Option<String>,
    pub index_number: Option<u8>,
    pub initial_key: Option<String>,
    pub internet_radio_name: Option<String>,
    pub internet_radio_owner: Option<String>,
    pub label: Option<String>,
    pub label_code: Option<String>,
    pub language: Option<String>,
    pub license: Option<String>,
    pub lyricist: Option<String>,
    pub lyrics: Option<String>,
    pub media_format: Option<String>,
    pub mix_dj: Option<String>,
    pub mix_engineer: Option<String>,
    pub mood: Option<String>,
    pub movement_name: Option<String>,
    pub movement_number: Option<u64>,
    pub movement_total: Option<u64>,
    pub mp3_gain_album_min_max: Option<String>,
    pub mp3_gain_min_max: Option<String>,
    pub mp3_gain_undo: Option<String>,
    pub music_brainz_album_artist_id: Option<String>,
    pub music_brainz_album_id: Option<String>,
    pub music_brainz_artist_id: Option<String>,
    pub music_brainz_disc_id: Option<String>,
    pub music_brainz_genre_id: Option<String>,
    pub music_brainz_label_id: Option<String>,
    pub music_brainz_original_album_id: Option<String>,
    pub music_brainz_original_artist_id: Option<String>,
    pub music_brainz_recording_id: Option<String>,
    pub music_brainz_release_group_id: Option<String>,
    pub music_brainz_release_status: Option<String>,
    pub music_brainz_release_track_id: Option<String>,
    pub music_brainz_release_type: Option<String>,
    pub music_brainz_track_id: Option<String>,
    pub music_brainz_trm_id: Option<String>,
    pub music_brainz_work_id: Option<String>,
    pub narrator: Option<String>,
    pub opus: Option<String>,
    pub original_album: Option<String>,
    pub original_artist: Option<String>,
    pub original_date: Option<String>,
    pub original_file: Option<String>,
    pub original_lyricist: Option<String>,
    pub original_writer: Option<String>,
    pub original_year: Option<u16>,
    pub owner: Option<String>,
    pub part: Option<String>,
    pub part_number: Option<u64>,
    pub part_total: Option<u64>,
    pub performer: Option<String>,
    pub play_counter: Option<u64>,
    pub podcast_category: Option<String>,
    pub podcast_description: Option<String>,
    pub podcast_flag: Option<bool>,
    pub podcast_keywords: Option<String>,
    pub producer: Option<String>,
    pub production_copyright: Option<String>,
    pub purchase_date: Option<String>,
    pub rating: Option<String>,
    pub recording_date: Option<String>,
    pub recording_location: Option<String>,
    pub recording_time: Option<String>,
    pub release_country: Option<String>,
    pub release_date: Option<String>,
    pub remixer: Option<String>,
    pub replay_gain_album_gain: Option<String>,
    pub replay_gain_album_peak: Option<String>,
    pub replay_gain_album_range: Option<String>,
    pub replay_gain_reference_loudness: Option<String>,
    pub replay_gain_track_gain: Option<String>,
    pub replay_gain_track_peak: Option<String>,
    pub replay_gain_track_range: Option<String>,
    pub script: Option<String>,
    pub soloist: Option<String>,
    pub sort_album: Option<String>,
    pub sort_album_artist: Option<String>,
    pub sort_artist: Option<String>,
    pub sort_composer: Option<String>,
    pub sort_track_title: Option<String>,
    pub sort_tv_show_title: Option<String>,
    pub tagging_date: Option<String>,
    pub terms_of_use: Option<String>,
    pub track_number: Option<u64>,
    pub track_subtitle: Option<String>,
    pub track_title: Option<String>,
    pub track_total: Option<u64>,
    pub tv_episode: Option<u64>,
    pub tv_episode_title: Option<String>,
    pub tv_network: Option<String>,
    pub tv_season: Option<u64>,
    pub tv_show_title: Option<String>,
    pub url: Option<String>,
    pub url_artist: Option<String>,
    pub url_copyright: Option<String>,
    pub url_internet_radio: Option<String>,
    pub url_label: Option<String>,
    pub url_official: Option<String>,
    pub url_payment: Option<String>,
    pub url_podcast: Option<String>,
    pub url_purchase: Option<String>,
    pub url_source: Option<String>,
    pub version: Option<String>,
    pub work: Option<String>,
    pub writer: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::song::Entity",
        from = "Column::SongId",
        to = "super::song::Column::Id"
    )]
    Song,
}

// `Related` trait has to be implemented by hand
impl Related<super::song::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Song.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
